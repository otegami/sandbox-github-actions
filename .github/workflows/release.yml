name: release
on:
  workflow_call:
    inputs:
      workflow_id:
        required: true
        type: string
    secrets:
      token:
        required: true
jobs:
  uploader:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: GITHUB_REF_NAME
          release_name: GITHUB_REF_NAME
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
      - name: List and download artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const run_id = parseInt("${{ inputs.workflow_id }}", 10);
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run_id
            });
            if (artifacts.artifacts.length === 0) {
              throw new Error("No artifacts found in the parent workflow run.");
            }
            const fs = require('fs');
            for (const artifact of artifacts.artifacts) {
              console.log(`Downloading artifact: ${artifact.name}`);
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
            }
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
      - name: Unzip Artifacts
        run: |
          mkdir -p extracted
          for f in *.zip; do
            unzip -o "$f" -d "./extracted/${f%.*}"
          done
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: GITHUB_REF_NAME
          release_name: GITHUB_REF_NAME
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
      - name: Upload Individual Files to Release
        run: |
          echo "${{ secrets.token }}" | gh auth login --with-token
          find ./extracted -type f | while read -r file; do
            echo "Uploading $file to release..."
            gh release upload "${GITHUB_REF_NAME}" "$file" --clobber
          done
        env:
          GH_TOKEN: ${{ secrets.token }}
